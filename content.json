{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":".NET Core 學習筆記（1）","text":"前陣子參加了兩天保哥的.NET Core開發實戰課程，雖說曾經自己稍微靠Google玩過一陣子.NET Core，但畢竟那都是零碎的知識，能有位老師仔細講解架構還是比較能完整的學習。 這兩天的課程真的讓我學到很多，尤其在最後保哥的經驗分享與討論軟體架構的部分讓我非常有收穫。軟體架構類的知識一直都是很難單純靠網路上Google就能學到的東西，我之前也因此被面試官電過……除非工作環境在這塊已經相當成熟有很多範例可以研究外，在網路上除了多看開源專案以外似乎沒有什麼管道能夠有系統的學習，所以保哥在課堂上的討論對我來說真的是非常有幫助。 上完課之後短時間內大概還沒有機會實際運用.NET Core，所以決定把上課實作的過程筆記下來，未來真的有機會要用的時候才有回憶依據。 以下內容為純筆記性質，不會有太多解說。 dotnet CLI 建立與發佈專案 &amp; 方案 dotnet new -l 列出可使用的範本 e.g. mvc、webapp、console等 dotnet new console 建立主控台專案 dotnet new classlib 建立類別庫專案 dotnet new mstest -n classlib1.test dotnet new sln 建立方案 &amp; 新增專案進方案 （但這個檔案基本上只有VS用） dotnet build 建置專案 dotnet clean 清除專案 dotnet run 建置並執行 dotnet publish 發佈 以上指令後面接方案檔即可針對整個方案執行 可以直接用dotnet指令執行dll檔 dotnet msbuild /p:Configuration=Release 使用MSBuild建置 dotnet test -t 列出可用的測試 dotnet test 執行測試 dotnet vstest 執行dll測試 dotnet add/remove/list reference {專案} 新增{專案}進參考/移除{專案}參考/列出所有參考 dotnet add/remove/list package {Nuget套件} 安裝{Nuget套件}/移除 {Nuget套件}/列出所有Nuget套件 部署參考官方文件： https://docs.microsoft.com/zh-tw/dotnet/core/deploying/deploy-with-cli 部署類型預設為FDD Framework 相依部署（FDD） 目標系統需安裝.NET Core Runtime Framework 相依可執行檔（FDE） .NET Core 2.2開始支援 目標系統需安裝.NET Core Runtiime 會直接部署目標平台的可執行檔，不須透過dotnet執行 自封式部署（SCD） 目標系統不須事先安裝任何共用元件 部署檔案相當大，包含.NET Core程式庫和Runtime的所有元件皆會部署，並無法與其他.NET Core應用程式共用 dotnet publish -c Release -r win10-x64 –self-contained true 設定使用SCD部屬 dotnet publish -c Release -r win10-x64 –self-contained false 不使用SCD部署 win10-x64為RID，可用dotnet –info查詢本機RID或查表 https://docs.microsoft.com/zh-tw/dotnet/core/rid-catalog dotnet publish -c Release /p:PublishDir=C:\\Work\\RD\\IIS 設定publish目標資料夾","link":"/2019/09/21/NET-Core-學習筆記-1/"},{"title":"初見","text":"初見Hexo 其實我一直以來對前端或是自己架站都沒有太多興趣，總是嫌麻煩，這次從朋友那邊得知Hexo可以直接在github上建立簡易的blog，而且找了些教學介紹文覺得應該還蠻容易的，又正好最近覺得應該要找地方紀錄一下技術相關筆記，於是就用了一個周末下午的時間試著架起來，發現其實還蠻好玩的，即使對前端或是Node.js一竅不通也能簡單架設，那就決定來用用看吧！ 除了技術筆記以外，這裡可能也會拿來分享一些工作上的心得。尤其近期工作上有比較大的轉變，環境上的差異讓我想了很多，就也會一併做紀錄。 閒聊 老實說，大概在半年前，我連什麼是Markdown語法都不知道。剛出社會時的工作環境並不需要一直學習新技術，最重要的是「達成需求」，所以會花很多時間在了解客戶的業務需求，並協助客戶分析。 工作期間我一直在思考，這樣就好了嗎？就這樣與新技術持續脫節下去好嗎？不會覺得可惜嗎？於是我等到一個契機，毅然轉職。 轉職後，進入和以前完全不同的環境，以前是求穩、更求正確，現在給我的感覺則是一味求快。身邊接觸的人也和以前不同，聽到了很多很多摒棄舊技術的言論，覺得現在就是應該要全面擁抱新技術，甚至完全不想了解為什麼舊技術能夠存活幾十年。 這些對我來講都是很大的衝擊。 即使我最後選擇了轉職，我也從來沒有後悔過我出社會的第一份工作在一個相對不追求新技術的公司。 世界上沒有任何一件事情是沒有值得學習的地方。 我想要繼續抱持著這份思想繼續在技術這條路上走下去。","link":"/2019/08/10/初見Hexo/"},{"title":"Advent of Code 2019 Day 1","text":"從同事那邊得知了這個到聖誕節一天會公開一道題目的活動，雖然到現在我也只寫到第七題，也不曉得能不能慢慢補進度寫完，但總之既然寫了就得留下點什麼，所以記錄在這裡。 題目：Advent of Code 2019 Day 1 使用語言：C# 第一天的Part1題目相當單純，就只是把一串數字陣列丟進公式計算並取總和。 Part2則是一個數字重複公式遞迴計算，雖然直覺用了遞迴，但果然平常沒在用就是不熟練，稍微小卡了一下。 最後的答案附在底下，因為題目很單純所以就沒有特別把Part1和Part2分開紀錄。 1234567891011121314151617181920212223242526272829303132333435363738using System;using System.Collections.Generic;using System.Linq; public class Program&#123; public static void Main() &#123; // Puzzle Input List&lt;int&gt; input = new List&lt;int&gt;() &#123; 125050,115884,132344,67441,119823,86204,111093,99489,67860,51288,62815,65263, 56540,81380,96101,116351,56330,123123,133969,115050,137851,136900,71254,53458, 139976,140218,117085,52241,71251,136110,103784,132893,140216,85568,94327,85200, 136753,110917,147197,120161,81684,56987,143452,94728,138355,54577,59898,69123,133769, 118418,93530,50297,71543,113383,135203,140129,70977,58566,129593,137456,130100,130915, 88872,96014,62746,127048,89522,62021,85363,143611,135995,65836,146022,119911,127381,121007, 71577,129637,90271,54640,117213,116151,114022,107683,102079,94388,135676,69019,104056,124799, 107998,148696,122793,135417,52981,122890,142491,88137,57609,54921 &#125;; var ans = input.Select(x=&gt;CalculateFuel(x)).Sum(); Console.WriteLine(ans); &#125; private static int CalculateFuel(int fuel) &#123; int result = (fuel / 3) - 2; if(result &lt; 1) return 0; result += CalculateFuel(result); return result; &#125;&#125;","link":"/2019/12/18/Advent-of-Code-2019-Day-1/"}],"tags":[{"name":"Note","slug":"Note","link":"/tags/Note/"},{"name":".NET Core","slug":"NET-Core","link":"/tags/NET-Core/"},{"name":"Newbie","slug":"Newbie","link":"/tags/Newbie/"},{"name":"Essay","slug":"Essay","link":"/tags/Essay/"},{"name":"Thoughts","slug":"Thoughts","link":"/tags/Thoughts/"},{"name":"Advent of Code 2019","slug":"Advent-of-Code-2019","link":"/tags/Advent-of-Code-2019/"},{"name":"Advent of Code","slug":"Advent-of-Code","link":"/tags/Advent-of-Code/"}],"categories":[{"name":".NET Core","slug":"NET-Core","link":"/categories/NET-Core/"},{"name":"Essay","slug":"Essay","link":"/categories/Essay/"},{"name":"Advent of Code 2019","slug":"Advent-of-Code-2019","link":"/categories/Advent-of-Code-2019/"}]}